{"version":3,"sources":["initialData.ts","store/reducer.ts","store/actionTypes.ts","store/_root.reducer.ts","store/mapStoreToProps.ts","store/mapDispatchToProps.ts","store/actionCreators.ts","components/Column/Column.styles.ts","components/Task/Task.styles.ts","components/TaskBar/TaskBar.tsx","components/Task/Task.tsx","getNewId.ts","components/Column/Column.tsx","components/Dropdown/Dropdown.tsx","components/NavBar/NavBar.tsx","App.tsx","index.tsx","localStorage.ts"],"names":["initialData","tasks","id","content","complete","columns","title","taskIds","columnOrder","allTasksReducer","state","action","type","payload","rootReducer","combineReducers","mapStoreToProps","reduxState","store","allTasks","mapDispatchToProps","updateTaskData","newTaskData","Container","styled","div","TitleWrapper","Title","h2","TitleInput","input","TaskList","props","isDraggingOver","AddButton","button","DeleteButton","isDragging","ToolButton","checkDisabled","TaskText","span","TaskInput","ToolBar","TaskBar","columnId","taskId","handleClickEditTask","handleClickDeleteTask","disabled","icon","faPen","onClick","style","pointerEvents","faTrash","Task","taskRef","React","createRef","showToolBar","editTask","updatedTaskContent","taskIdClicked","onMouseEnter","setState","onMouseLeave","handleSaveTask","newState","handlePressEnterKey","event","key","handleClickOutside","current","contains","target","handleClickCheckTask","handleTaskInputChange","value","updatedTasks","updatedColumnsTaskIds","filter","task","document","addEventListener","this","removeEventListener","draggableId","index","provided","snapshot","draggableProps","dragHandleProps","ref","innerRef","faCheckCircle","faCircle","autoFocus","defaultValue","onFocus","e","currentTarget","select","onChange","onKeyDown","className","Component","connect","getNewId","object","newId","currentIds","Object","keys","length","lastId","lastIdNum","parseInt","split","InnerList","map","PureComponent","Column","titleRef","updateColumnTitle","columnIdClicked","updatedTitle","handleSaveColumnTitle","handleClickColumnTitle","handleTitleInputChange","handleDeleteColumn","updatedColumns","tasksInDeletedColumn","window","confirm","forEach","updatedColumnOrder","column","handleAddTask","newTaskId","newTaskIdArray","push","droppableId","droppableProps","placeholder","faPlus","Button","DropdownMenu","List","ul","ListItem","li","useState","open","setOpen","newColumnId","h1","NavBar","OuterContainer","taskMap","App","onDragEnd","result","destination","source","start","finish","startTaskIds","Array","from","splice","newStart","finishTaskIds","newFinish","newTaskIds","newColumn","newColumnOrder","direction","persistedState","localAllTasksState","localStorage","getItem","JSON","parse","error","console","loadState","createStore","applyMiddleware","logger","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.a2f0174b.chunk.js","sourcesContent":["const initialData: InitialData = {\n  tasks: {\n    \"task-1\": {\n      id: \"task-1\",\n      content:\n        \"Hover over ☰ at the top left of the screen on nav bar to add new column\",\n      complete: false,\n    },\n    \"task-2\": {\n      id: \"task-2\",\n      content: \"Click on column title text to edit column title\",\n      complete: false,\n    },\n    \"task-3\": {\n      id: \"task-3\",\n      content: \"Hover over individual task to view more options\",\n      complete: false,\n    },\n    \"task-4\": {\n      id: \"task-4\",\n      content: \"Click on circle in each task to check or uncheck task\",\n      complete: false,\n    },\n    \"task-5\": { id: \"task-5\", content: \"Drag tasks between columns\", complete: false },\n    \"task-6\": { id: \"task-6\", content: \"Drag columns to reorder them\", complete: false },\n    \"task-7\": { id: \"task-7\", content: \"Make dinner\", complete: false },\n    \"task-8\": { id: \"task-8\", content: \"Pay bills\", complete: false },\n    \"task-9\": {\n      id: \"task-9\",\n      content: \"Make dentist appointment\",\n      complete: false,\n    },\n  },\n  columns: {\n    \"column-1\": {\n      id: \"column-1\",\n      title: \"Tutorial\",\n      taskIds: [\"task-1\", \"task-2\", \"task-3\", \"task-4\"],\n    },\n    \"column-2\": {\n      id: \"column-2\",\n      title: \"Ethan's Tasks\",\n      taskIds: [\"task-5\", \"task-6\"],\n    },\n    \"column-3\": {\n      id: \"column-3\",\n      title: \"Leila's Tasks\",\n      taskIds: [\"task-7\", \"task-8\", \"task-9\"],\n    },\n  },\n  // Facilitate reordering of the columns\n  columnOrder: [\"column-1\", \"column-2\", \"column-3\"],\n};\n\nexport default initialData;\n","import initialData from \"../initialData\";\nimport * as actionTypes from \"./actionTypes\";\n\nconst allTasksReducer = (state = initialData, action: TaskAction) => {\n  switch (action.type) {\n    case actionTypes.UPDATE_DATA:\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default allTasksReducer;\n","export const UPDATE_DATA = \"UPDATE_DATA\";\n// export const DELETE_COLUMN = \"DELETE_COLUMN\";\n","import { combineReducers } from \"redux\";\nimport allTasksReducer from \"./reducer\";\n\nexport const rootReducer = combineReducers({ allTasksReducer });\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","import { RootState } from \"./_root.reducer\";\n\nconst mapStoreToProps = (reduxState: RootState) => {\n  return {\n    store: reduxState,\n    // reduxState properties bound directly to \"props\"\n    // ---------\n    // Instead of taking everything from state, we just want the user info.\n    // if you wanted you could write this code like this:\n    allTasks: reduxState.allTasksReducer,\n  };\n};\n\nexport default mapStoreToProps;\n","import { updateTaskData } from \"./actionCreators\";\n\nconst mapDispatchToProps = {\n  updateTaskData,\n};\n\nexport default mapDispatchToProps;\n","import * as actionTypes from \"./actionTypes\";\n\n// export function typedAction(type: string, payload?: any) {\n//   return {type, payload};\n// }\n\nexport function updateTaskData(newTaskData: InitialData): TaskAction {\n  return {\n    type: actionTypes.UPDATE_DATA,\n    payload: newTaskData,\n  };\n}\n","import styled from \"styled-components\";\n\ntype ColumnStyleProps = {\n  isDraggingOver: boolean;\n};\n\nexport const Container = styled.div`\n  margin: 8px;\n  background-color: white;\n  border: 1px solid lightgrey;\n  border-radius: 6px;\n  width: 220px;\n  // add flex and flex column to display items within columns\n  display: flex;\n  flex-direction: column;\n  height: fit-content;\n`;\n\nexport const TitleWrapper = styled.div`\n  background-color: #758bfd;\n  border: 1px solid lightgrey;\n  border-radius: 6px;\n  padding: 10px 20px;\n  // text-align: center;\n  display: flex;\n  justify-content: space-between;\n  width: 81%;\n`;\n\nexport const Title = styled.h2`\n  margin: 5px;\n  cursor: text;\n  border-radius: 4px;\n  color: #f1f2f6;\n  text-align: center;\n`;\n\nexport const TitleInput = styled.input`\n  border-radius: 6px;\n  border-style: none;\n  font-family: inherit;\n  font-size: 1.5em;\n  padding: 5px;\n  // text-align: center;\n  width: 80%;\n\n  &:focus {\n    outline: none;\n  }\n`;\n\nexport const TaskList = styled.div<ColumnStyleProps>`\n  padding: 8px;\n  transition: background-color 0.2s ease;\n  background-color: ${(props) =>\n    props.isDraggingOver ? \"#f1f2f6\" : \"inherit\"};\n  // flex-grow: 1;\n  // have a min-height so the droppable area's height is not 0 when there are no items\n  min-height: 100px;\n`;\n\nexport const AddButton = styled.button`\n  padding: 0;\n  border: 0;\n  background-color: white;\n  cursor: pointer;\n  font-size: 1em;\n  margin: 10px auto;\n  outline: 0;\n  color: #758bfd;\n  border-radius: 50%;\n  height: 25px;\n  width: 25px;\n\n  &:hover {\n    color: #fff;\n    background-color: #758bfd;\n  }\n`;\n\nexport const DeleteButton = styled.button`\n  padding: 0;\n  border: 0;\n  background-color: #758bfd;\n  cursor: pointer;\n  font-size: 1em;\n  margin: 10px 0;\n  outline: 0;\n  color: #fff;\n  height: 15px;\n  width: 15px;\n\n  &:hover {\n    color: #ff3c00;\n  }\n`;\n","import styled from \"styled-components\";\n\ntype TaskStyleProps = {\n  isDragging: boolean;\n};\n\ntype TaskTextProps = {\n  complete: boolean;\n};\n\ntype CheckButtonProps = {\n  checkDisabled: boolean;\n};\nexport const Container = styled.div<TaskStyleProps>`\n  border: 1px solid lightgrey;\n  border-radius: 4px;\n  padding: 8px;\n  margin-bottom: 8px;\n  background-color: ${(props) => (props.isDragging ? \"#aeb8fe\" : \"white\")};\n\n  display: flex;\n  position: relative;\n`;\n\nexport const ToolButton = styled.button<CheckButtonProps>`\n  background: inherit;\n  cursor: pointer;\n  font-size: 0.8em;\n  padding: 2px 4px 2px 0;\n  border: 0;\n  pointer-events: ${(props) => (props.checkDisabled ? \"none\" : \"inherit\")};\n  opacity: ${(props) => (props.checkDisabled ? \"0\" : \"1\")};\n\n  &:hover {\n    color: #758bfd;\n  }\n`;\n\nexport const TaskText = styled.span<TaskTextProps>`\n  text-decoration: ${(props) => props.complete && \"line-through\"};\n`;\n\nexport const TaskInput = styled.input`\n  border-radius: 2px;\n  border-style: none;\n  // border-bottom-width: thin;\n  font-family: inherit;\n  font-size: 1em;\n  padding: 0;\n  width: 80%;\n\n  &:focus {\n    // outline: #758bfd solid 0.5px;\n    outline: none;\n  }\n`;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPen, faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport styled from \"styled-components\";\n\nconst ToolBar = styled.div`\n  border: 1px solid lightgray;\n  border-radius: 3px;\n  position: absolute;\n  transform: translateY(-100%);\n  left: 50%;\n  background-color: white;\n`;\n\nconst ToolButton = styled.button`\n  background: none;\n  cursor: pointer;\n  font-size: 0.8em;\n  outline: 0;\n  padding: 2px 6px;\n  border: 0;\n\n  &:hover {\n    color: #758bfd;\n  }\n\n  &:disabled {\n    cursor: not-allowed;\n    color: lightgray;\n  }\n`;\n\ntype TaskBarProps = {\n  columnId: string;\n  taskId: string;\n  complete: boolean;\n  handleClickEditTask: (taskId: string) => void;\n  handleClickDeleteTask: (taskId: string, columnId: string) => void;\n};\n\nconst TaskBar: React.FC<TaskBarProps> = ({\n  columnId,\n  taskId,\n  complete,\n  handleClickEditTask,\n  handleClickDeleteTask,\n}) => {\n  return (\n    <ToolBar>\n      <ToolButton disabled={complete}>\n        <FontAwesomeIcon\n          icon={faPen}\n          onClick={() => handleClickEditTask(taskId)}\n          // add pointer event none to disable click event\n          style={complete ? { pointerEvents: \"none\" } : {}}\n        />\n      </ToolButton>\n      <ToolButton>\n        <FontAwesomeIcon\n          icon={faTrash}\n          onClick={() => handleClickDeleteTask(taskId, columnId)}\n        />\n      </ToolButton>\n    </ToolBar>\n  );\n};\n\nexport default TaskBar;\n","import React, { KeyboardEvent } from \"react\";\nimport { connect } from \"react-redux\";\nimport mapStoreToProps from \"../../store/mapStoreToProps\";\nimport mapDispatchToProps from \"../../store/mapDispatchToProps\";\nimport { Container, ToolButton, TaskText, TaskInput } from \"./Task.styles\";\nimport { Draggable } from \"react-beautiful-dnd\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheckCircle, faCircle } from \"@fortawesome/free-regular-svg-icons\";\nimport TaskBar from \"../TaskBar/TaskBar\";\n\ntype PropsFromRedux = ReturnType<typeof mapStoreToProps> &\n  typeof mapDispatchToProps;\n\ntype TaskProps = {\n  task: ITask;\n  index: number;\n  columnId: string;\n};\n\nclass Task extends React.Component<PropsFromRedux & TaskProps> {\n  taskRef = React.createRef<HTMLInputElement>();\n  state = {\n    showToolBar: false,\n    taskId: \"\",\n    editTask: false,\n    updatedTaskContent: \"\",\n    checkDisabled: false,\n    taskIdClicked: \"\",\n  };\n\n  onMouseEnter = (taskId: string) => {\n    this.setState({ showToolBar: true, taskId: taskId });\n  };\n\n  onMouseLeave = () => {\n    this.setState({ showToolBar: false });\n  };\n\n  componentDidMount() {\n    document.addEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n  handleSaveTask = () => {\n    const taskId = this.state.taskIdClicked;\n    this.setState({\n      editTask: false,\n      checkDisabled: false,\n      taskIdClicked: \"\",\n    });\n    if (!this.state.updatedTaskContent) return;\n\n    const newState = {\n      ...this.props.allTasks,\n      tasks: {\n        ...this.props.allTasks.tasks,\n        [taskId]: {\n          ...this.props.allTasks.tasks[taskId],\n          content: this.state.updatedTaskContent,\n        },\n      },\n    };\n    this.props.updateTaskData(newState);\n  };\n\n  handlePressEnterKey = (event: KeyboardEvent) => {\n    if (event.key === \"Enter\") {\n      this.handleSaveTask();\n    }\n  };\n\n  handleClickOutside = (event: MouseEvent) => {\n    if (\n      this.taskRef.current &&\n      !this.taskRef.current.contains(event.target as HTMLInputElement)\n    ) {\n      this.handleSaveTask();\n    }\n  };\n\n  handleClickCheckTask = (taskId: string, complete: boolean) => {\n    const newState = {\n      ...this.props.allTasks,\n      tasks: {\n        ...this.props.allTasks.tasks,\n        [taskId]: {\n          ...this.props.allTasks.tasks[taskId],\n          complete: !complete,\n        },\n      },\n    };\n    this.props.updateTaskData(newState);\n  };\n\n  handleClickEditTask = (taskId: string) => {\n    this.setState({\n      ...this.state,\n      editTask: true,\n      checkDisabled: true,\n      taskIdClicked: taskId,\n    });\n  };\n\n  handleTaskInputChange = (event: any) => {\n    this.setState({\n      ...this.state,\n      updatedTaskContent: event.target.value,\n    });\n  };\n\n  handleClickDeleteTask = (taskId: string, columnId: string) => {\n    const updatedTasks = { ...this.props.allTasks.tasks };\n    delete updatedTasks[taskId];\n\n    const updatedColumnsTaskIds = [\n      ...this.props.allTasks.columns[columnId].taskIds,\n    ].filter((task) => task !== taskId);\n\n    const newState = {\n      ...this.props.allTasks,\n      tasks: updatedTasks,\n      columns: {\n        ...this.props.allTasks.columns,\n        [columnId]: {\n          ...this.props.allTasks.columns[columnId],\n          taskIds: updatedColumnsTaskIds,\n        },\n      },\n    };\n    this.props.updateTaskData(newState);\n  };\n\n  render() {\n    return (\n      <Draggable draggableId={this.props.task.id} index={this.props.index}>\n        {(provided, snapshot) => (\n          <Container\n            onMouseEnter={() => this.onMouseEnter(this.props.task.id)}\n            onMouseLeave={this.onMouseLeave}\n            {...provided.draggableProps}\n            // dragHandleProps allows users to drag anywhere on the task\n            // can also create separate handle component to control where can be dragged\n            {...provided.dragHandleProps}\n            ref={provided.innerRef}\n            isDragging={snapshot.isDragging}\n          >\n            <ToolButton checkDisabled={this.state.checkDisabled}>\n              <FontAwesomeIcon\n                icon={this.props.task.complete ? faCheckCircle : faCircle}\n                onClick={() =>\n                  this.handleClickCheckTask(\n                    this.props.task.id,\n                    this.props.task.complete\n                  )\n                }\n              />\n            </ToolButton>\n            {!this.state.editTask ? (\n              <>\n                <TaskText\n                  className={this.props.task.id}\n                  complete={this.props.task.complete}\n                >\n                  {this.props.task.content}\n                </TaskText>\n                {this.state.showToolBar && (\n                  <TaskBar\n                    columnId={this.props.columnId}\n                    taskId={this.props.task.id}\n                    complete={this.props.task.complete}\n                    handleClickEditTask={this.handleClickEditTask}\n                    handleClickDeleteTask={this.handleClickDeleteTask}\n                  />\n                )}\n              </>\n            ) : (\n              <TaskInput\n                type=\"text\"\n                autoFocus\n                defaultValue={this.props.task.content}\n                onFocus={(e) => e.currentTarget.select()}\n                onChange={this.handleTaskInputChange}\n                onKeyDown={this.handlePressEnterKey}\n                ref={this.taskRef}\n              />\n            )}\n          </Container>\n        )}\n      </Draggable>\n    );\n  }\n}\n\nexport default connect(mapStoreToProps, mapDispatchToProps)(Task);\n","const getNewId = (object: IColumns | ITasks, type: string) => {\n  // store all current ids (column or task) in an array\n  const currentIds = Object.keys(object);\n  let newId: string;\n  // if there are no columns/task exist\n  if (currentIds.length === 0) {\n    // set column/task id to column-1 or task-1\n    newId = `${type}-1`;\n  } else {\n    // get the last column/task id\n    const lastId = currentIds[currentIds.length - 1];\n    const lastIdNum = parseInt(lastId.split(\"-\")[1]);\n    newId = `${type}-${lastIdNum + 1}`;\n  }\n  return newId;\n};\n\nexport default getNewId;\n","import React, { KeyboardEvent } from \"react\";\nimport { connect } from \"react-redux\";\nimport mapStoreToProps from \"../../store/mapStoreToProps\";\nimport mapDispatchToProps from \"../../store/mapDispatchToProps\";\nimport {\n  Container,\n  Title,\n  TaskList,\n  AddButton,\n  TitleWrapper,\n  TitleInput,\n  DeleteButton,\n} from \"./Column.styles\";\nimport { Droppable, Draggable } from \"react-beautiful-dnd\";\nimport Task from \"../Task/Task\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus, faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport getNewId from \"../../getNewId\";\n\ntype ColumnProps = {\n  column: IColumn;\n  tasks: ITask[];\n  type?: string;\n  isDropDisabled?: boolean;\n  index: number;\n};\n\ntype InnerListProps = {\n  tasks: ITask[];\n  columnId: string;\n};\n\ntype PropsFromRedux = ReturnType<typeof mapStoreToProps> &\n  typeof mapDispatchToProps;\n\nclass InnerList extends React.PureComponent<InnerListProps> {\n  render() {\n    return this.props.tasks.map((task, index) => (\n      <Task\n        key={task.id}\n        task={task}\n        index={index}\n        columnId={this.props.columnId}\n      />\n    ));\n  }\n}\n\nclass Column extends React.Component<PropsFromRedux & ColumnProps> {\n  titleRef = React.createRef<HTMLInputElement>();\n  state = {\n    updateColumnTitle: false,\n    columnIdClicked: \"\",\n    updatedTitle: \"\",\n  };\n\n  componentDidMount() {\n    document.addEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"mousedown\", this.handleClickOutside);\n  }\n\n  handleSaveColumnTitle = () => {\n    const columnId = this.state.columnIdClicked;\n    this.setState({\n      updateColumnTitle: false,\n      columnIdClicked: \"\",\n    });\n    // if no changes made to title exit function\n    if (!this.state.updatedTitle) return;\n\n    const newState = {\n      ...this.props.allTasks,\n      columns: {\n        ...this.props.allTasks.columns,\n        [columnId]: {\n          ...this.props.allTasks.columns[columnId],\n          title: this.state.updatedTitle,\n        },\n      },\n    };\n\n    this.props.updateTaskData(newState);\n  };\n\n  handleClickOutside = (event: MouseEvent) => {\n    if (\n      this.titleRef.current &&\n      !this.titleRef.current.contains(event.target as HTMLInputElement)\n    ) {\n      this.handleSaveColumnTitle();\n    }\n  };\n\n  handlePressEnterKey = (event: KeyboardEvent) => {\n    if (event.key === \"Enter\") {\n      this.handleSaveColumnTitle();\n    }\n  };\n\n  handleClickColumnTitle = (columnId: string) => {\n    this.setState({\n      updateColumnTitle: true,\n      columnIdClicked: columnId,\n    });\n  };\n\n  handleTitleInputChange = (event: any) => {\n    this.setState({\n      ...this.state,\n      updatedTitle: event.target.value,\n    });\n  };\n\n  handleDeleteColumn = (columnId: string) => {\n    // create a copy of all current columns object from all tasks reducer\n    const updatedColumns = { ...this.props.allTasks.columns };\n    // get all taskIds in the column to be deleted\n    const tasksInDeletedColumn = updatedColumns[columnId].taskIds;\n    // check to see if there are tasks in the column the user wants to delete\n    if (tasksInDeletedColumn.length > 0) {\n      // if there are tasks in the current column, pop up a window to ask user to confirm\n      if (\n        window.confirm(\n          `Deleting the column will also delete the tasks in this column. Are you sure you want to delete the \"${updatedColumns[columnId].title}\" column?`\n        ) === false\n      ) {\n        // is user does not want to delete the column with tasks in it, exit\n        return;\n      }\n    }\n\n    // create a copy of all tasks from all tasks reducer\n    const updatedTasks = { ...this.props.allTasks.tasks };\n    // delete tasks under the column to be deleted from all tasks\n    tasksInDeletedColumn.forEach((taskId) => {\n      delete updatedTasks[taskId];\n    });\n    // if user wants to delete the column\n    // (either no tasks in column or user confirmed deletion)\n    // delete the column with using the columnId\n    delete updatedColumns[columnId];\n    // delete the column from the copy of columnOder array\n    const updatedColumnOrder = [...this.props.allTasks.columnOrder].filter(\n      (column) => column !== columnId\n    );\n    // create new state with updated column data\n    const newState = {\n      tasks: updatedTasks,\n      columns: updatedColumns,\n      columnOrder: updatedColumnOrder,\n    };\n    // set state/reducer with new column data\n    this.props.updateTaskData(newState);\n  };\n\n  handleAddTask = (columnId: string) => {\n    const newTaskId = getNewId(this.props.allTasks.tasks, \"task\");\n    const newTaskIdArray = [...this.props.allTasks.columns[columnId].taskIds];\n    newTaskIdArray.push(newTaskId);\n    const newState = {\n      ...this.props.allTasks,\n      tasks: {\n        ...this.props.allTasks.tasks,\n        [newTaskId]: {\n          id: newTaskId,\n          content: \"New task\",\n          complete: false,\n        },\n      },\n      columns: {\n        ...this.props.allTasks.columns,\n        [columnId]: {\n          ...this.props.allTasks.columns[columnId],\n          taskIds: [...newTaskIdArray],\n        },\n      },\n    };\n    this.props.updateTaskData(newState);\n  };\n\n  render() {\n    return (\n      <Draggable draggableId={this.props.column.id} index={this.props.index}>\n        {(provided, snapshot) => (\n          <Container {...provided.draggableProps} ref={provided.innerRef}>\n            <TitleWrapper {...provided.dragHandleProps}>\n              {!this.state.updateColumnTitle &&\n              this.props.column.id !== this.state.columnIdClicked ? (\n                <Title\n                  onClick={() =>\n                    this.handleClickColumnTitle(this.props.column.id)\n                  }\n                >\n                  {this.props.column.title}\n                </Title>\n              ) : (\n                <TitleInput\n                  type=\"text\"\n                  defaultValue={this.props.column.title}\n                  onChange={this.handleTitleInputChange}\n                  autoFocus\n                  onFocus={(e) => e.currentTarget.select()}\n                  ref={this.titleRef}\n                  onKeyDown={this.handlePressEnterKey}\n                />\n              )}\n              <DeleteButton\n                type=\"button\"\n                onClick={() => this.handleDeleteColumn(this.props.column.id)}\n              >\n                <FontAwesomeIcon icon={faTrash} />\n              </DeleteButton>\n            </TitleWrapper>\n\n            <Droppable droppableId={this.props.column.id} type=\"task\">\n              {(provided, snapshot) => (\n                <TaskList\n                  ref={provided.innerRef}\n                  {...provided.droppableProps}\n                  isDraggingOver={snapshot.isDraggingOver}\n                >\n                  <InnerList\n                    tasks={this.props.tasks}\n                    columnId={this.props.column.id}\n                  />\n                  {provided.placeholder}\n                </TaskList>\n              )}\n            </Droppable>\n            <AddButton\n              type=\"button\"\n              onClick={() => this.handleAddTask(this.props.column.id)}\n            >\n              <FontAwesomeIcon icon={faPlus} />\n            </AddButton>\n          </Container>\n        )}\n      </Draggable>\n    );\n  }\n}\n\nexport default connect(mapStoreToProps, mapDispatchToProps)(Column);\n","import React, { useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport mapStoreToProps from \"../../store/mapStoreToProps\";\nimport mapDispatchToProps from \"../../store/mapDispatchToProps\";\nimport styled from \"styled-components\";\nimport getNewId from \"../../getNewId\";\n\nconst Container = styled.div`\n  position: relative;\n  display: incline-block;\n`;\n\nconst Button = styled.button`\n  padding: 0;\n  border: 0;\n  background-color: #4a4584;\n  cursor: pointer;\n  font-size: 1.5em;\n  outline: 0;\n  color: #f1f2f6;\n`;\n\nconst DropdownMenu = styled.div`\n  position: absolute;\n  top: 100%;\n  left: 0;\n\n  width: 100px;\n  z-index: 2;\n  // border: 1px solid rgba(0, 0, 0, 0.04);\n  box-shadow: 0 16px 24px 2px rgba(0, 0, 0, 0.14);\n  background-color: white;\n  border-radius: 3px;\n`;\n\nconst List = styled.ul`\n  list-style: none;\n  padding: 0;\n  margin: 0;\n`;\n\nconst ListItem = styled.li`\n  padding: 8px 12px;\n  background-position: center;\n  transition: background 0.8s;\n  font-size: 0.8em;\n  font-weight: bold;\n  border-radius: 3px;\n  color: #4a4584;\n\n  &:hover {\n    cursor: pointer;\n    color: #758bfd;\n    below are for clicking effect, did not use\n    background-color: rgba(0, 0, 0, 0.1);\n    background: #fff radial-gradient(circle, transparent 1%, #fff 1%)\n      center/15000%;\n  }\n  &:active {\n    background-color: #bdb2ff;\n    background-size: 100%;\n  transition: background 0s;\n  }\n`;\n\ntype PropsFromRedux = ReturnType<typeof mapStoreToProps> &\n  typeof mapDispatchToProps;\n\nconst Dropdown: React.FC<PropsFromRedux> = ({ updateTaskData, allTasks }) => {\n  const [open, setOpen] = useState<boolean>(false);\n\n  const handleAddColumn = () => {\n    const newColumnId = getNewId(allTasks.columns, \"column\");\n    const newState = {\n      ...allTasks,\n      columns: {\n        ...allTasks.columns,\n        [newColumnId]: {\n          id: newColumnId,\n          title: \"New Column\",\n          taskIds: [],\n        },\n      },\n      columnOrder: [...allTasks.columnOrder, newColumnId],\n    };\n    updateTaskData(newState);\n  };\n\n  return (\n    <Container\n      onMouseEnter={() => setOpen(true)}\n      onMouseLeave={() => setOpen(false)}\n    >\n      <Button type=\"button\">☰</Button>\n      {open && (\n        <DropdownMenu>\n          <List>\n            <ListItem onClick={handleAddColumn}>Add Column</ListItem>\n          </List>\n        </DropdownMenu>\n      )}\n    </Container>\n  );\n};\n\nexport default connect(mapStoreToProps, mapDispatchToProps)(Dropdown);\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Dropdown from \"../Dropdown/Dropdown\";\n\nconst Container = styled.div`\n  display: flex;\n  align-items: flex-end;\n  background-color: #4a4584;\n  margin: 0;\n  padding: 6px 18px 3px 18px;\n  width: 100%;\n`;\n\nconst Title = styled.h1`\n  margin: 0 15px 0 0;\n  color: #f1f2f6;\n`;\n\nconst NavBar: React.FC = () => {\n  return (\n    <Container>\n      <Title>Task App</Title>\n      <Dropdown />\n    </Container>\n  );\n};\n\nexport default NavBar;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport mapStoreToProps from \"./store/mapStoreToProps\";\nimport mapDispatchToProps from \"./store/mapDispatchToProps\";\nimport Column from \"./components/Column/Column\";\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\";\nimport styled from \"styled-components\";\nimport NavBar from \"./components/NavBar/NavBar\";\n\nconst Container = styled.div`\n  display: flex;\n`;\n\nconst OuterContainer = styled.div`\n  margin: 10px;\n`;\n\ntype ColumnProps = {\n  column: IColumn;\n  taskMap: ITasks;\n  type?: string;\n  isDropDisabled?: boolean;\n  index: number;\n};\n\ntype PropsFromRedux = ReturnType<typeof mapStoreToProps> &\n  typeof mapDispatchToProps;\n\nclass InnerList extends React.PureComponent<ColumnProps> {\n  render() {\n    const { column, taskMap, index } = this.props;\n    const tasks = column.taskIds.map((taskId: string) => taskMap[taskId]);\n    return <Column column={column} tasks={tasks} index={index} />;\n  }\n}\n\nclass App extends React.Component<PropsFromRedux> {\n  onDragEnd = (result: any) => {\n    const { destination, source, draggableId, type } = result;\n    // do nothing if item is dropped outside of the list\n    if (!destination) return;\n    // do nothing if item is dropped into the same place\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    if (type === \"column\") {\n      const newColumnOrder = Array.from(this.props.allTasks.columnOrder);\n      newColumnOrder.splice(source.index, 1);\n      newColumnOrder.splice(destination.index, 0, draggableId);\n\n      const newState = {\n        ...this.props.allTasks,\n        columnOrder: newColumnOrder,\n      };\n\n      this.props.updateTaskData(newState);\n      return;\n    }\n\n    // start column\n    const start = this.props.allTasks.columns[source.droppableId];\n    // finish column\n    const finish = this.props.allTasks.columns[destination.droppableId];\n    // if item was moved within the same column\n    if (start === finish) {\n      // create a new array that contains the current items\n      const newTaskIds = Array.from(start.taskIds);\n      // start from this index (source.index) remove 1 item\n      // remove the item dragged from it's original position\n      newTaskIds.splice(source.index, 1);\n      // start from destination index, remove nothing and insert the draggableId\n      // insert the dragged item to the new position\n      newTaskIds.splice(destination.index, 0, draggableId);\n      // create new, updated object with current id data order for columns\n      const newColumn = {\n        ...start,\n        taskIds: newTaskIds,\n      };\n      // create new state data with updated column data\n      const newState = {\n        ...this.props.allTasks,\n        columns: {\n          ...this.props.allTasks.columns,\n          [newColumn.id]: newColumn,\n        },\n      };\n      // set state with new column data\n      this.props.updateTaskData(newState);\n      return;\n    }\n\n    // Moving items from one list to another\n    // create a new array that contains the same taskIds as the old array\n    const startTaskIds = Array.from(start.taskIds);\n    // remove the dragged item from the array created above\n    startTaskIds.splice(source.index, 1);\n    // create a new start (source) column with contains the same properties as the old column\n    // but with the new startTaskIds array - does not include the dragged item\n    const newStart = {\n      ...start,\n      taskIds: startTaskIds,\n    };\n    // create a new array that includes all items in the destination list/column\n    const finishTaskIds = Array.from(finish.taskIds);\n    // insert the dragged item into the new array created above\n    finishTaskIds.splice(destination.index, 0, draggableId);\n    // create new, updated object for destination column\n    const newFinish = {\n      ...finish,\n      taskIds: finishTaskIds,\n    };\n    // create new state data with updated column data for both source and destination columns\n    const newState = {\n      ...this.props.allTasks,\n      columns: {\n        ...this.props.allTasks.columns,\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish,\n      },\n    };\n    this.props.updateTaskData(newState);\n  };\n\n  render() {\n    return (\n      <>\n        <NavBar />\n        {/* DragDropContext has three callbacks, onDragStart, onDragUpdate and\n        onDragEnd(which is the only required one) */}\n        <OuterContainer>\n          <DragDropContext onDragEnd={this.onDragEnd}>\n            <Droppable\n              droppableId=\"all-columns\"\n              direction=\"horizontal\"\n              type=\"column\"\n            >\n              {(provided) => (\n                <Container {...provided.droppableProps} ref={provided.innerRef}>\n                  {this.props.allTasks.columnOrder.map(\n                    (columnId: string, index) => {\n                      const column = this.props.allTasks.columns[columnId];\n\n                      return (\n                        <InnerList\n                          key={column.id}\n                          column={column}\n                          taskMap={this.props.allTasks.tasks}\n                          index={index}\n                        />\n                      );\n                    }\n                  )}\n                  {provided.placeholder}\n                </Container>\n              )}\n            </Droppable>\n          </DragDropContext>\n        </OuterContainer>\n      </>\n    );\n  }\n}\n\nexport default connect(mapStoreToProps, mapDispatchToProps)(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport logger from \"redux-logger\";\nimport { rootReducer } from \"./store/_root.reducer\";\nimport { loadState, saveState } from \"./localStorage\";\n\nimport \"./index.css\";\nimport App from \"./App\";\n\nconst persistedState = loadState();\n\nconst store = createStore(rootReducer, persistedState, applyMiddleware(logger));\n\nstore.subscribe(() => {\n  const reduxState = store.getState().allTasksReducer;\n  saveState(reduxState);\n});\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n","export const loadState = () => {\n  try {\n    const localAllTasksState: string | null = localStorage.getItem(\n      \"reduxState\"\n    );\n\n    if (!localAllTasksState) return undefined;\n    // when use combinedReducers()\n    // preload state must be a plain object with the same shape as the keys passed to it\n    return { allTasksReducer: JSON.parse(localAllTasksState) };\n  } catch (error) {\n    // if error, return undefined to let reducer initialize app\n    console.error(\"Load state from local storage error\", error);\n    return undefined;\n  }\n};\n\nexport const saveState = (reduxState: InitialData) => {\n  try {\n    const localAllTasksState = JSON.stringify(reduxState);\n    localStorage.setItem(\"reduxState\", localAllTasksState);\n  } catch (error) {\n    console.error(\"Save to local storage error\", error);\n  }\n};\n"],"sourceRoot":""}